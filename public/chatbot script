<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>PrepMate: AI Tutor Chat</title>
    <!-- Load Tailwind CSS -->
    <script src="https://cdn.tailwindcss.com"></script>
    <!-- Load Lucide Icons -->
    <script src="https://unpkg.com/lucide@latest"></script>
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Inter:wght@100..900&display=swap');
        body {
            font-family: 'Inter', sans-serif;
            background-color: #f7f9fc; /* Light educational background */
        }
        /* Custom scrollbar for chat history */
        #chat-history::-webkit-scrollbar {
            width: 8px;
        }
        #chat-history::-webkit-scrollbar-thumb {
            background-color: #cbd5e1; /* slate-300 */
            border-radius: 4px;
        }
        #chat-history::-webkit-scrollbar-thumb:hover {
            background-color: #94a3b8; /* slate-400 */
        }
    </style>
</head>
<body class="flex flex-col h-screen antialiased">

    <!-- Main Chat Container -->
    <div id="app" class="flex flex-col h-full w-full max-w-4xl mx-auto shadow-xl rounded-xl bg-white md:my-6 md:h-[90%]">
        
        <!-- Header -->
        <header class="p-4 bg-indigo-600 text-white rounded-t-xl shadow-md flex items-center justify-between">
            <div class="flex items-center">
                <i data-lucide="graduation-cap" class="w-6 h-6 mr-3 text-indigo-200"></i>
                <h1 class="text-xl font-extrabold tracking-tight">AI Tutor</h1>
            </div>
            <span class="text-indigo-200 text-sm font-medium hidden sm:inline">PrepMate Exam Companion</span>
        </header>

        <!-- Chat History Display Area -->
        <main id="chat-history" class="flex-grow p-4 overflow-y-auto space-y-4">
            <!-- Initial Greeting -->
            <div class="flex justify-start">
                <div class="bg-indigo-100 p-3 rounded-xl rounded-tl-none max-w-[80%] shadow-sm text-gray-800">
                    <p class="font-bold text-indigo-700 mb-1">AI Tutor</p>
                    <!-- Updated greeting for direct persona -->
                    <p>PrepMate AI Tutor is active. Provide your study question for a direct answer.</p>
                </div>
            </div>
        </main>

        <!-- Loading Indicator -->
        <div id="loading-indicator" class="hidden p-3 bg-gray-50 border-t border-gray-200 text-center text-sm text-indigo-500 font-medium">
            <span class="animate-pulse">AI Tutor is thinking...</span>
        </div>

        <!-- Chat Input Area -->
        <footer class="p-4 border-t border-gray-200 bg-gray-50 rounded-b-xl">
            <form id="chat-form" class="flex gap-2">
                <input
                    type="text"
                    id="user-input"
                    placeholder="Ask a question, review a concept, or ask for a quiz..."
                    autocomplete="off"
                    required
                    class="flex-grow p-3 border border-gray-300 rounded-lg focus:ring-indigo-500 focus:border-indigo-500 transition duration-150"
                />
                <button
                    type="submit"
                    id="send-button"
                    class="bg-indigo-600 hover:bg-indigo-700 text-white font-semibold py-3 px-4 rounded-lg flex items-center justify-center transition duration-150 active:scale-95 disabled:bg-indigo-400"
                >
                    <i data-lucide="send" class="w-5 h-5"></i>
                </button>
            </form>
        </footer>

    </div>

    <script>
        // --- API & Environment Setup ---
        // Note: The __app_id and __firebase_config variables are provided by the hosting environment.
        const apiKey = "";
        const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-preview-09-2025:generateContent?key=${apiKey}`;

        const chatForm = document.getElementById('chat-form');
        const userInput = document.getElementById('user-input');
        const chatHistory = document.getElementById('chat-history');
        const loadingIndicator = document.getElementById('loading-indicator');
        const sendButton = document.getElementById('send-button');

        // Initialize icons
        lucide.createIcons();

        // System Instruction defining the AI Tutor persona
        // MODIFIED: Instruction strictly enforces brief, straightforward, and direct answers without extra content.
        const systemInstruction = "You are the PrepMate AI Tutor. Your primary goal is to provide brief, straightforward, and direct academic answers. Do not use conversational fillers, jokes, personal opinions, or complex formatting. Get straight to the point in every response.";

        let chatHistoryData = [];

        // --- Utility Functions ---

        /**
         * Parses Markdown text into HTML for rendering in the chat window.
         * Note: This function remains, but the new system instruction tells the model
         * to use plain text, minimizing the need for complex parsing.
         * @param {string} markdownText - The text to parse.
         * @returns {string} - The HTML string.
         */
        function parseMarkdown(markdownText) {
            let htmlText = markdownText || '';
            
            // Convert bold (**text** or __text__)
            htmlText = htmlText.replace(/\*\*([^\*]+)\*\*/g, '<strong>$1</strong>');
            htmlText = htmlText.replace(/__([^_]+)__/g, '<strong>$1</strong>');
            
            // Convert italics (*text* or _text_)
            htmlText = htmlText.replace(/\*([^\*]+)\*/g, '<em>$1</em>');
            htmlText = htmlText.replace(/_([^_]+)_/g, '<em>$1</em>');
            
            // Convert list items (simple - item)
            htmlText = htmlText.replace(/^\s*-\s+(.*)$/gm, '<li>$1</li>');
            htmlText = htmlText.replace(/<\/li>\n<li>/g, '</li><li>');
            
            // Wrap lists
            if (htmlText.includes('<li>')) {
                htmlText = '<ul>' + htmlText.replace(/<li>/g, '<li class="ml-4 list-disc">').replace(/<\/li>/g, '</li>') + '</ul>';
            }

            // Convert double newlines to paragraph breaks, single newlines to br
            htmlText = htmlText.replace(/\n\n/g, '</p><p>').replace(/\n/g, '<br>');

            // Ensure text is wrapped in <p> tags if it wasn't already
            if (!htmlText.startsWith('<p>') && !htmlText.startsWith('<ul>')) {
                htmlText = `<p>${htmlText}</p>`;
            }
            
            return htmlText;
        }

        /**
         * Displays a message in the chat history.
         * @param {string} text - The content of the message.
         * @param {'user'|'model'} sender - Who sent the message.
         * @param {Array<Object>} sources - Optional array of grounding sources.
         */
        function displayMessage(text, sender, sources = []) {
            const messageWrapper = document.createElement('div');
            messageWrapper.className = sender === 'user' ? 'flex justify-end' : 'flex justify-start';

            const messageBubble = document.createElement('div');
            messageBubble.className = sender === 'user'
                ? 'bg-indigo-600 text-white p-3 rounded-xl rounded-br-none max-w-[80%] shadow-lg'
                : 'bg-indigo-100 p-3 rounded-xl rounded-tl-none max-w-[80%] shadow-sm text-gray-800';

            if (sender === 'model') {
                const nameTag = document.createElement('p');
                nameTag.className = 'font-bold text-indigo-700 mb-1';
                nameTag.textContent = 'AI Tutor';
                messageBubble.appendChild(nameTag);
            }

            const content = document.createElement('div');
            // Use the markdown parser for the AI response
            content.innerHTML = sender === 'model' ? parseMarkdown(text) : `<p>${text}</p>`;
            messageBubble.appendChild(content);

            if (sources.length > 0) {
                const sourcesDiv = document.createElement('div');
                sourcesDiv.className = 'mt-2 pt-2 border-t border-indigo-200 text-xs text-indigo-700 italic';
                sourcesDiv.innerHTML = '<strong>Grounded Sources:</strong> ' + sources.slice(0, 3).map(s => 
                    `<a href="${s.uri}" target="_blank" rel="noopener noreferrer" class="hover:underline">${s.title || 'Source'}</a>`
                ).join(', ');
                messageBubble.appendChild(sourcesDiv);
            }

            messageWrapper.appendChild(messageBubble);
            chatHistory.appendChild(messageWrapper);
            
            // Auto-scroll to the bottom
            chatHistory.scrollTop = chatHistory.scrollHeight;
        }

        /**
         * Toggles the loading state.
         * @param {boolean} isLoading
         */
        function setLoading(isLoading) {
            loadingIndicator.classList.toggle('hidden', !isLoading);
            userInput.disabled = isLoading;
            sendButton.disabled = isLoading;
            sendButton.innerHTML = isLoading 
                ? '<i data-lucide="loader" class="w-5 h-5 animate-spin"></i>'
                : '<i data-lucide="send" class="w-5 h-5"></i>';
            lucide.createIcons();
        }

        /**
         * Calls the Gemini API with exponential backoff for resilience.
         * @param {string} userQuery - The current user message.
         */
        async function callGeminiAPI(userQuery, retryCount = 0) {
            const maxRetries = 3;
            const delay = Math.pow(2, retryCount) * 1000; // Exponential backoff: 1s, 2s, 4s

            const conversationHistory = chatHistoryData.map(msg => ({
                role: msg.role === 'user' ? 'user' : 'model',
                parts: [{ text: msg.text }]
            }));
            
            conversationHistory.push({ role: 'user', parts: [{ text: userQuery }] });

            const payload = {
                contents: conversationHistory,
                // Enable Google Search grounding for up-to-date academic information
                tools: [{ "google_search": {} }], 
                systemInstruction: {
                    parts: [{ text: systemInstruction }]
                },
            };

            try {
                const response = await fetch(apiUrl, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(payload)
                });

                if (!response.ok) {
                    if (retryCount < maxRetries) {
                        await new Promise(resolve => setTimeout(resolve, delay));
                        return callGeminiAPI(userQuery, retryCount + 1);
                    }
                    throw new Error(`API call failed with status: ${response.status}`);
                }

                const result = await response.json();
                const candidate = result.candidates?.[0];

                if (candidate && candidate.content?.parts?.[0]?.text) {
                    const text = candidate.content.parts[0].text;
                    
                    let sources = [];
                    const groundingMetadata = candidate.groundingMetadata;
                    if (groundingMetadata && groundingMetadata.groundingAttributions) {
                        sources = groundingMetadata.groundingAttributions
                            .map(attribution => ({
                                uri: attribution.web?.uri,
                                title: attribution.web?.title,
                            }))
                            .filter(source => source.uri && source.title);
                    }

                    // Add model response to history
                    chatHistoryData.push({ role: 'model', text: text });
                    displayMessage(text, 'model', sources);
                } else {
                    displayMessage("Sorry, I ran into an issue getting a detailed response. Please try asking again!", 'model');
                }

            } catch (error) {
                console.error("API Error:", error);
                displayMessage("Oops! I couldn't connect to the tutoring system. Please check your network or try again later.", 'model');
            } finally {
                setLoading(false);
            }
        }


        // --- Event Listener ---
        chatForm.addEventListener('submit', (e) => {
            e.preventDefault();
            const query = userInput.value.trim();

            if (query === '') return;

            // 1. Display user message
            displayMessage(query, 'user');
            
            // 2. Add user message to history
            chatHistoryData.push({ role: 'user', text: query });

            // 3. Clear input and show loading
            userInput.value = '';
            setLoading(true);

            // 4. Call the API
            callGeminiAPI(query);
        });

    </script>
</body>
</html>
